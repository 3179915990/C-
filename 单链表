#include"SList.h"



SLTNode* BuySListNode(SLTDataType x)
{
	SLTNode* newnode = (SLTNode*)malloc(sizeof(SLTNode));
	newnode->data = x;
	newnode->next = NULL;
	return newnode;
}
void SListPrint(SLTNode* phead)//打印
{
	SLTNode* cur = phead;
	while (cur != NULL)
	{
		printf("%d->", cur->data);
			cur = cur->next;
	}
	printf("\n");
}


void SListPushBack(SLTNode** pphead, SLTDataType x)//尾插
{
	SLTNode* N = BuySListNode(x);
	if (*pphead == NULL)
	{
		*pphead = N;
	}
	else
	{
		SLTNode* T = *pphead;
		while (T->next != NULL)
		{
			T = T->next;
		}
		T->next = N;
	}

	
}


void SListPushFront(SListNode** pphead, SLTDataType x)//头插
{
	
	SLTNode* n = BuySListNode(x);
	n->next = *pphead;
	*pphead = n;

}



void SListPopFrout(SListNode** pphead)//尾删
{
	//当它为空结构体时
	if (*pphead == NULL)
	{
		return;
	}
	//当他就为一个结构体
	else if((*pphead)->next==NULL)
	{
		free(*pphead);
		*pphead = NULL;

	}
	else
	{
		SLTNode* prev = NULL;
		SLTNode* tail = *pphead;
		//先让 tail找到最后一个 清空最后一个
		while (tail->next != NULL)
		{
			prev = tail;
			//当tail 找到最后一个  preve 指向在前一个结构体
			tail = tail -> next;

		}
		free(tail);
		prev->next = NULL;

	}
}
void SListPopbBack(SListNode** pphead)//头删
{
	SLTNode* N = (*pphead)->next;
	free(*pphead);
	*pphead = N;
}

